From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Wed, 23 Nov 2022 11:04:41 +0300
Subject: Preserve text marks

---
 lisp/emacspeak-advice.el | 54 ++++++++++++++------------
 lisp/emacspeak-nxml.el   |  4 +-
 lisp/emacspeak-speak.el  | 98 +++++++++++++++++++++++++++++-------------------
 3 files changed, 94 insertions(+), 62 deletions(-)

diff --git a/lisp/emacspeak-advice.el b/lisp/emacspeak-advice.el
index 7e95aee..4cec1c2 100644
--- a/lisp/emacspeak-advice.el
+++ b/lisp/emacspeak-advice.el
@@ -741,6 +741,7 @@ icon."
      (cl-declare (special emacspeak-last-message inhibit-message
                           emacspeak-speak-messages emacspeak-lazy-message-time))
      (let ((inhibit-read-only t)
+           (deactivate-mark nil)
            (m nil))
        ad-do-it
        (setq m (current-message))
@@ -974,8 +975,9 @@ icon."
   `(defadvice ,f (after emacspeak pre act comp)
      "Say what you completed."
      (when (ems-interactive-p)
-       (tts-with-punctuations 'all
-                              (dtk-speak dabbrev--last-expansion))))))
+       (let ((deactivate-mark nil))
+         (tts-with-punctuations 'all
+                                (dtk-speak dabbrev--last-expansion)))))))
 
 (voice-setup-add-map
  '(
@@ -994,7 +996,8 @@ icon."
      (cond
       ((ems-interactive-p)
        (ems-with-messages-silenced
-        (let ((prior (point)))
+        (let ((prior (point))
+              (deactivate-mark nil))
           (emacspeak-kill-buffer-carefully "*Completions*")
           ad-do-it
           (if (> (point) prior)
@@ -1013,7 +1016,8 @@ icon."
   `(defadvice ,f (around emacspeak pre act comp)
      "Say what you completed."
      (ems-with-messages-silenced
-      (let ((prior (save-excursion (skip-syntax-backward "^ >") (point))))
+      (let* ((deactivate-mark nil)
+             (prior (save-excursion (skip-syntax-backward "^ >") (point))))
         ad-do-it
         (if (> (point) prior)
             (tts-with-punctuations
@@ -2999,16 +3003,14 @@ Produce auditory icons if possible."
 ;;}}}
 ;;{{{ Asking Questions:
 
-(defadvice yes-or-no-p (before emacspeak pre act comp)
-  "Play auditory icon."
-  (emacspeak-auditory-icon 'ask-question))
-
-(defadvice yes-or-no-p (after emacspeak pre act comp)
-  "Play auditory icon."
-  (cond
-   (ad-return-value
-    (emacspeak-auditory-icon 'yes-answer))
-   (t (emacspeak-auditory-icon 'no-answer))))
+(defadvice yes-or-no-p (around emacspeak pre act )
+  "Produce an auditory icon on result."
+  (let ((deactivate-mark nil))
+    ad-do-it
+    (if ad-return-value
+        (emacspeak-auditory-icon 'yes-answer )
+      (emacspeak-auditory-icon  'no-answer )))
+  ad-return-value )
 
 (cl-loop for f in
       '(map-y-or-n-p
@@ -3039,15 +3041,21 @@ Produce auditory icons if possible."
   "Play auditory icon."
   (emacspeak-auditory-icon 'help))
 
-(defadvice y-or-n-p (before emacspeak pre act comp)
-  "Play auditory icon."
-  (emacspeak-auditory-icon 'ask-short-question))
-
-(defadvice y-or-n-p (after emacspeak pre act comp)
-  "Play auditory icon."
-  (cond
-   (ad-return-value (emacspeak-auditory-icon 'y-answer))
-   (t (emacspeak-auditory-icon 'n-answer))))
+(defadvice y-or-n-p (around emacspeak pre act comp)
+  "Use speech when prompting.
+Produce an auditory icon if possible."
+  (let ((deactivate-mark nil))
+    (emacspeak-auditory-icon 'ask-short-question)
+    (tts-with-punctuations 'all
+                           (dtk-speak (format "%s y or n" (ad-get-arg 0))))
+    ad-do-it
+    (cond
+     (ad-return-value
+      (emacspeak-auditory-icon 'y-answer)
+      (dtk-say "y"))
+     (t (emacspeak-auditory-icon 'n-answer)
+        (dtk-say "n")))
+    ad-return-value))
 
 ;;}}}
 ;;{{{ Advice process-menu
diff --git a/lisp/emacspeak-nxml.el b/lisp/emacspeak-nxml.el
index 16de865..c25bf3c 100644
--- a/lisp/emacspeak-nxml.el
+++ b/lisp/emacspeak-nxml.el
@@ -246,7 +246,9 @@
   (cl-declare (special o-close))
   (cond
    ((get-text-property (point) 'nxml-outline-state)
-    (let ((o-open nil))
+    (let ((o-open nil)
+          (o-close nil)
+	  (deactivate-mark nil))
       (save-excursion
         (setq o-open (car (overlays-at (point))))
         (next-line 1)
diff --git a/lisp/emacspeak-speak.el b/lisp/emacspeak-speak.el
index 9caf68f..0dcbbf1 100644
--- a/lisp/emacspeak-speak.el
+++ b/lisp/emacspeak-speak.el
@@ -319,7 +319,8 @@ normally bound to \\[emacspeak-table-display-table-in-region]."
 (defun emacspeak-speak-completions-if-available ()
   "Speak completions if available."
   (interactive)
-  (let ((completions (get-buffer "*Completions*")))
+  (let ((deactivate-mark nil)
+        (completions (get-buffer "*Completions*")))
     (cond
      ((and completions
            (window-live-p (get-buffer-window completions)))
@@ -406,13 +407,14 @@ Argument BODY specifies forms to execute."
 (defun emacspeak-audio-annotate-paragraphs ()
   "Set property auditory-icon at front of all paragraphs."
   (save-excursion
-    (goto-char (point-max))
-    (with-silent-modifications
-      (let ((sound-cue 'paragraph))
-        (while (not (bobp))
-          (backward-paragraph)
-          (put-text-property (point) (+ 2 (point))
-                             'auditory-icon sound-cue))))))
+    (let ((deactivate-mark nil))
+      (goto-char (point-max))
+      (with-silent-modifications
+        (let ((sound-cue 'paragraph))
+          (while (not (bobp))
+            (backward-paragraph)
+            (put-text-property  (point) (+ 2    (point))
+                                'auditory-icon sound-cue)))))))
 
 (defcustom emacspeak-speak-paragraph-personality voice-animate
   "Personality used to mark start of paragraph."
@@ -436,6 +438,7 @@ Useful to do this before you listen to an entire buffer."
       (goto-char (point-min))
       (condition-case nil
           (let ((start nil)
+                (deactivate-mark nil)
                 (blank-line "\n[ \t\n\r]*\n")
                 (inhibit-point-motion-hooks t)
                 (inhibit-modification-hooks t)
@@ -963,6 +966,7 @@ with auditory icon `more'.  These can then be spoken using command
         (inhibit-read-only t)
         (inhibit-point-motion-hooks t)
         (inhibit-modification-hooks t)
+        (deactivate-mark nil)
         (icon (get-char-property (point) 'auditory-icon))
         (before (get-char-property (point) 'before-string))
         (after (get-char-property (point) 'after-string))
@@ -1081,6 +1085,7 @@ Cues the start of a physical line with auditory icon `left'."
   (cl-declare (special dtk-stop-immediately emacspeak-show-point))
   (when dtk-stop-immediately (dtk-stop))
   (let ((inhibit-field-text-motion t)
+        (deactivate-mark nil)
         (inhibit-read-only t)
         (start nil)
         (end nil)
@@ -1365,6 +1370,7 @@ Negative prefix arg speaks from start of sentence to point."
   (when (listp arg) (setq arg (car arg)))
   (save-excursion
     (let ((orig (point))
+          (deactivate-mark nil)
           (inhibit-point-motion-hooks t)
           (inhibit-modification-hooks t)
           (start nil)
@@ -1389,6 +1395,7 @@ Negative prefix arg speaks from start of sexp to point. "
   (when (listp arg) (setq arg (car arg)))
   (save-excursion
     (let ((orig (point))
+          (deactivate-mark nil)
           (inhibit-point-motion-hooks t)
           (inhibit-modification-hooks t)
           (start nil)
@@ -1418,6 +1425,7 @@ If option  `voice-lock-mode' is on, then it will use any defined personality."
   (when (listp arg) (setq arg (car arg)))
   (save-excursion
     (let ((orig (point))
+          (deactivate-mark nil)
           (inhibit-point-motion-hooks t)
           (start nil)
           (end nil))
@@ -1441,6 +1449,7 @@ If voice-lock-mode is on, then it will use any defined personality. "
   (when (listp arg) (setq arg (car arg)))
   (save-excursion
     (let ((orig (point))
+          (deactivate-mark nil)
           (inhibit-point-motion-hooks t)
           (start nil)
           (end nil))
@@ -1517,7 +1526,8 @@ Useful to listen to a buffer without switching  contexts."
 With prefix arg, speaks the rest of the buffer from point.
 Negative prefix arg speaks from start of buffer to point."
   (interactive "P")
-  (let ((help-buffer (get-buffer "*Help*")))
+  (let ((deactivate-mark nil)
+        (help-buffer (get-buffer "*Help*")))
     (cond
      (help-buffer
       (emacspeak-auditory-icon 'help)
@@ -1535,7 +1545,8 @@ Negative prefix arg speaks from start of buffer to point."
  With prefix arg, speaks the rest of the buffer from point.
 Negative prefix arg speaks from start of buffer to point."
   (interactive "P")
-  (let ((minibuff (window-buffer (minibuffer-window))))
+  (let ((deactivate-mark nil)
+        (minibuff (window-buffer (minibuffer-window))))
     (save-current-buffer
       (set-buffer minibuff)
       (emacspeak-speak-buffer arg))))
@@ -1543,7 +1554,7 @@ Negative prefix arg speaks from start of buffer to point."
 ;;;###autoload
 (defun emacspeak-get-current-completion ()
   "Return the completion string under point in the *Completions* buffer."
-  (let (beg end)
+  (let (deactivate-mark beg end)
     (if (and (not (eobp)) (get-text-property (point) 'mouse-face))
         (setq end (point) beg (1+ (point))))
     (if (and (not (bobp)) (get-text-property (1- (point)) 'mouse-face))
@@ -1770,12 +1781,15 @@ semantic to do the work."
 
 (defun emacspeak-speak-buffer-info ()
   "Speak buffer information."
-  (message "Buffer has %s lines and %s characters %s "
-           (count-lines (point-min) (point-max))
-           (- (point-max) (point-min))
-           (if (= 1 (point-min))
-               ""
-             "with narrowing in effect. ")))
+  (let ((deactivate-mark nil))
+    (dtk-speak-and-echo
+     (format "Buffer has %s lines and %s characters %s "
+             (count-lines (point-min) (point-max))
+             (- (point-max) (point-min))
+             (if (= 1 (point-min))
+                 ""
+               "with narrowing in effect. ")))))
+
 (voice-setup-map-face 'header-line 'voice-bolden)
 
 (defun emacspeak--sox-multiwindow (corners)
@@ -1855,6 +1869,7 @@ Interactive prefix arg speaks buffer info."
      (buffer-info (emacspeak-speak-buffer-info))
      (t                                 ; main branch
       (let ((global-info (downcase (format-mode-line global-mode-string)))
+            (deactivate-mark nil)
             (window-count (length (window-list)))
             (vc-state (when vc-mode (vc-state (buffer-file-name))))
             (frame-info (emacspeak-get-voicefied-frame-info (selected-frame)))
@@ -1930,16 +1945,18 @@ Optional  interactive prefix arg `copy-as-kill' copies spoken info to kill ring.
   (interactive "P")
   (cl-declare (special minor-mode-alist))
   (force-mode-line-update)
-  (let ((cs (ems-get-buffer-coding-system)) (info
-                                             (mapconcat
-                                              #'(lambda (item)
-                                                  (let ((var (car item))
-                                                        (value (cadr item)))
-                                                    (if (and (boundp var) (eval var))
-                                                        (format-mode-line value)
-                                                      "")))
-                                              minor-mode-alist
-                                              " ")))
+  (let ((cs (ems-get-buffer-coding-system))
+        (deactivate-mark nil)
+        (info
+         (mapconcat
+          #'(lambda(item)
+              (let ((var (car item))
+                    (value (cadr item)))
+                (if (and (boundp var) (eval var))
+                    (format-mode-line  value)
+                  "")))
+          minor-mode-alist
+          " ")))
     (when copy-as-kill (kill-new info))
     (dtk-speak (concat info cs))))
 
@@ -1954,7 +1971,8 @@ Interactive prefix arg `filename' speaks only the final path
 component.
 The result is put in the kill ring for convenience."
   (interactive "P")
-  (let ((location (or (buffer-file-name)
+  (let ((deactivate-mark nil)
+        (location (or (buffer-file-name)
                       default-directory)))
     (when filename
       (setq location
@@ -2113,14 +2131,15 @@ Second interactive prefix sets clock to new timezone."
   (interactive "P")
   (cl-declare (special emacspeak-speak-time-format-string))
   (emacspeak-auditory-icon 'time)
-  (cond
-   (world (call-interactively 'emacspeak-speak-world-clock))
-   (t
-    (tts-with-punctuations
-     'some
-     (dtk-notify-speak
-      (format-time-string emacspeak-speak-time-format-string
-                          (current-time) (getenv "TZ")))))))
+  (let ((deactivate-mark nil))
+    (cond
+     (world (call-interactively 'emacspeak-speak-world-clock))
+     (t
+      (tts-with-punctuations
+       'some
+       (dtk-notify-speak
+        (format-time-string emacspeak-speak-time-format-string
+                            (current-time) (getenv "TZ"))))))))
 
 ;;;###autoload
 (defun emacspeak-speak-seconds-since-epoch (seconds)
@@ -2212,7 +2231,8 @@ text that will be yanked as a result of a \\[yank] followed by count-1
 \\[yank-pop] be spoken. The kill number that is spoken says what
 numeric prefix arg to give to command yank."
   (interactive "p")
-  (let ((context
+  (let ((deactivate-mark nil)
+        (context
          (format "kill %s "
                  (if current-prefix-arg (+ 1 count) 1))))
     (put-text-property 0 (length context)
@@ -2315,6 +2335,7 @@ by a change in voice personality."
     (error "Not that many marks in this buffer"))
   (let ((line nil)
         (pos nil)
+        (deactivate-mark nil)
         (context
          (format "mark %s "
                  (if current-prefix-arg count 0))))
@@ -2721,7 +2742,8 @@ Otherwise just display a message."
 ;;Return current window contents
 (defun emacspeak-get-window-contents ()
   "Return window contents."
-  (let ((start nil))
+  (let ((deactivate-mark nil)
+        (start nil))
     (save-excursion
       (move-to-window-line 0)
       (setq start (point))
