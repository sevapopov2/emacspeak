From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Thu, 24 Nov 2022 15:52:38 +0300
Subject: Magit support enhancement

---
 lisp/emacspeak-magit.el | 451 +++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 354 insertions(+), 97 deletions(-)

diff --git a/lisp/emacspeak-magit.el b/lisp/emacspeak-magit.el
index 2a1292a..8137533 100644
--- a/lisp/emacspeak-magit.el
+++ b/lisp/emacspeak-magit.el
@@ -57,6 +57,28 @@
 ;;{{{ Map voices to faces:
 (voice-setup-add-map
  '(
+   (magit-header voice-bolden)
+   (magit-section-title voice-annotate)
+   (magit-whitespace-warning-face voice-monotone)
+   (magit-menu-selected-option voice-animate)
+   (magit-branch voice-lighten)
+   (magit-diff-add voice-animate-extra)
+   (magit-diff-del voice-animate-extra)
+   (magit-diff-file-header voice-animate)
+   (magit-diff-hunk-header voice-animate-medium)
+   (magit-diff-none voice-monotone)
+   (magit-item-highlight voice-brighten)
+   (magit-item-mark voice-lighten-extra)
+   (magit-log-head-label-bisect-bad voice-smoothen)
+   (magit-log-head-label-bisect-good voice-bolden)
+   (magit-log-head-label-default voice-monotone)
+   (magit-log-head-label-local voice-lighten)
+   (magit-log-head-label-patches voice-bolden)
+   (magit-log-head-label-remote voice-bolden)
+   (magit-log-head-label-tags voice-animate)
+   (magit-log-message voice-monotone)
+   (magit-log-sha1 voice-monotone)
+   (magit-log-tag-label voice-annotate)
    (magit-bisect-bad voice-animate)
    (magit-bisect-good voice-lighten)
    (magit-bisect-skip voice-monotone)
@@ -72,12 +94,10 @@
    (magit-cherry-unmatched voice-animate)
    (magit-diff-added voice-animate-extra)
    (magit-diff-added-highlight voice-animate)
-   (magit-diff-added-highlight voice-animate-extra)
    (magit-diff-base voice-annotate)
    (magit-diff-base-highlight voice-animate)
    (magit-diff-conflict-heading voice-bolden-extra)
    (magit-diff-context voice-monotone)
-   (magit-diff-context-highlight voice-brighten)
    (magit-diff-context-highlight voice-lighten)
    (magit-diff-file-heading voice-brighten)
    (magit-diff-file-heading-highlight voice-bolden-extra)
@@ -159,21 +179,69 @@
 ;;}}}
 ;;{{{ Advice navigation commands:
 
+(defadvice magit-correct-point-after-command (around emacspeak pre act comp)
+  "Fix speech feedback when walking around a magit buffer."
+  (let ((from-invisible (invisible-p (point))))
+    ad-do-it
+    (unless (invisible-p (point))
+      (when (and from-invisible
+                 (or (eq this-command 'next-line)
+                     (eq this-command 'previous-line)))
+        (emacspeak-speak-line)))
+    ad-return-value))
+
 ;;; Advice navigators:
-(defadvice magit-mark-item (after emacspeak pre act comp)
+(cl-loop for f in
+      '(magit-mark-item
+        git-rebase-reword
+        git-rebase-edit
+        git-rebase-squash
+        git-rebase-fixup
+        git-rebase-pick)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p )
+            (emacspeak-auditory-icon 'mark-object)
+            (emacspeak-speak-line)))))
+
+(defadvice git-rebase-kill-line (after emacspeak pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'mark-object)
+    (emacspeak-auditory-icon 'deselect-object)
     (emacspeak-speak-line)))
 
-(defadvice magit-toggle-section (after emacspeak pre act comp)
+(defadvice git-rebase-undo (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon (if (buffer-modified-p) 'modified-object 'unmodified-object))))
+
+(defadvice git-rebase-move-line-up (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'left)))
+
+(defadvice git-rebase-move-line-down (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'right)))
+
+(defadvice magit-pop-revision-stack (after emacspeak pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
-    (let ((state (magit-section-hidden-body (magit-current-section))))
-      (cond
-       (state (emacspeak-auditory-icon 'close-object))
-       (t (emacspeak-auditory-icon 'open-object)))
-      (emacspeak-speak-line))))
+    (emacspeak-auditory-icon 'yank-object)))
+
+(cl-loop for f in
+      '(magit-copy-item-as-kill
+        magit-copy-section-value
+        magit-copy-buffer-revision)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'mark-object)))))
 
 (cl-loop
  for f in
@@ -182,9 +250,9 @@
    magit-next-line magit-previous-line
    magit-section-forward-sibling magit-section-backward-sibling
    magit-ignore-file magit-ignore-item
-   magit-stash
-   magit-unstage magit-unstage-all magit-unstage-file
-   magit-stage magit-stage-file  magit-stage-modified
+   magit-stash magit-stash-snapshot
+   magit-unstage magit-unstage-file magit-unstage-item
+   magit-stage magit-stage-file  magit-stage-item
    magit-ignore-item-locally
    magit-goto-next-section magit-goto-previous-section
    magit-goto-parent-section magit-goto-line
@@ -225,130 +293,319 @@
   `(defadvice ,f (after emacspeak pre act comp)
      "Provide auditory feedback."
      (when (ems-interactive-p)
-       (emacspeak-speak-line)
        (emacspeak-auditory-icon
-        (if   (magit-section-hidden-body (ad-get-arg 0)) 'close-object 'open-object))))))
+        (if   (magit-section-hidden (ad-get-arg 0))
+            'close-object
+          'open-object))
+       (emacspeak-speak-line)))))
+
+(defadvice magit-toggle-section (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p)
+    (emacspeak-auditory-icon
+     (if (magit-section-hidden (magit-current-section))
+         'close-object
+       'open-object))
+    (emacspeak-speak-line)))
 
 ;;}}}
 ;;{{{ Advice generator to advice generated  commands:
 
-(defadvice magit-invoke-popup (after emacspeak pre act comp)
-  "Speech-enable  magit-popup."
-  (emacspeak-auditory-icon 'open-object)
-  (emacspeak-speak-buffer))
+(defadvice  magit-key-mode-generate (after emacspeak pre act comp)
+  "Advice  the key-group menu for GROUP"
+  (let ((group (ad-get-arg 0))))
+  (eval
+   `(defadvice ,(intern (concat "magit-key-mode-popup-" (symbol-name group))) 
+        (after emacspeak  pre act comp)
+      ,(concat "Speech-enabled Key menu for " (symbol-name group))
+      (dtk-speak
+       (save-current-buffer
+         (set-buffer ,(format magit-key-mode-buf-name group))
+         (buffer-string))))))
+;;; load the magit-key-mode file so the above advice gets applied:
 
-(defadvice magit-invoke-popup-option (after emacspeak pre act comp)
+(when (locate-library "magit-key-mode")
+  (load-library "magit-key-mode"))
+
+(defadvice magit-invoke-popup-action (after emacspeak  pre act comp)
+  "Provide auditory feedback on quit action."
+  (when (and (ems-interactive-p) (eq (ad-get-arg 0) ?q))
+    (emacspeak-auditory-icon 'close-object)
+    (emacspeak-speak-mode-line)))
+
+(defadvice magit-popup-help (after emacspeak  pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'close-object)
+    (emacspeak-auditory-icon 'help)
     (emacspeak-speak-line)))
 
-(defadvice magit-invoke-popup-action (after emacspeak pre act comp)
+(defadvice magit-popup-toggle-show-common-commands (after emacspeak  pre act comp)
   "Provide auditory feedback."
+  (cl-declare (special magit-popup-show-common-commands))
   (when (ems-interactive-p)
-    (dtk-stop 'all)
-    (emacspeak-auditory-icon 'close-object)
-    (emacspeak-speak-mode-line)))
+    (emacspeak-auditory-icon (if magit-popup-show-common-commands 'on 'off))))
+
+(cl-loop for f in
+      '(magit-popup-set-default-arguments magit-popup-save-default-arguments)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon (if (ad-get-arg 0) 'close-object 'save-object))))))
+
+(defadvice magit-invoke-popup (after emacspeak pre act comp)
+  "Speech-enable  magit-popup."
+  (emacspeak-auditory-icon 'open-object)
+  (emacspeak-speak-buffer))
 
 ;;}}}
 ;;{{{ Advice hide/show commands:
+
 (cl-loop for f in
-         '(magit-show magit-show-branches magit-show-commit
-                      magit-show-branches-mode
-                      magit-show-item-or-scroll-down magit-show-item-or-scroll-up
-                      magit-show-level
-                      magit-show-level-1 magit-show-level-1-all
-                      magit-show-level-2 magit-show-level-2-all
-                      magit-show-level-3 magit-show-level-3-all
-                      magit-show-level-4 magit-show-level-4-all
-                      magit-show-only-files magit-show-only-files-all
-                      magit-expand-section magit-expand-collapse-section
-                      magit-show-section magit-show-stash)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory feedback."
-             (when (ems-interactive-p)
-               (emacspeak-speak-line)
-               (emacspeak-auditory-icon 'open-object)))))
+      '(magit-show magit-show-commit
+                   magit-show-branches magit-show-branches-mode
+                   magit-show-item-or-scroll-down magit-show-item-or-scroll-up
+                   magit-show-level
+                   magit-show-level-1 magit-show-level-1-all
+                   magit-show-level-2 magit-show-level-2-all
+                   magit-show-level-3 magit-show-level-3-all
+                   magit-show-level-4 magit-show-level-4-all
+                   magit-show-only-files magit-show-only-files-all
+                   magit-expand-section magit-expand-collapse-section
+                   magit-show-section magit-show-stash
+                   magit-status
+                   magit-visit-item magit-diff-visit-file
+                   magit-log
+                   magit-log-long
+                   magit-log-current
+                   magit-log-head
+                   magit-log-branches
+                   magit-log-all-branches
+                   magit-log-all
+                   magit-log-buffer-file
+                   magit-reflog
+                   magit-reflog-head
+                   magit-reflog-current
+                   magit-wazzup
+                   magit-interactive-resolve-item
+                   git-rebase-show-commit)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-speak-line)
+            (emacspeak-auditory-icon 'open-object)))))
 
 (cl-loop for f in
-         '(magit-hide-section magit-collapse-section)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory feedback."
-             (when (ems-interactive-p)
-               (emacspeak-speak-line)
-               (emacspeak-auditory-icon 'close-object)))))
+      '(magit-hide-section
+        magit-collapse-section
+        magit-invoke-popup-option
+        magit-log-select-quit
+        magit-mode-quit-window)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-speak-line)
+            (emacspeak-auditory-icon 'close-object)))))
+
+(cl-loop for f in
+      '(magit-quit-window
+        magit-quit-branches-window
+        magit-kill-this-buffer
+        magit-key-mode-kill-buffer
+        magit-mode-bury-buffer
+        magit-log-bury-buffer
+        magit-popup-quit)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'close-object)
+            (with-current-buffer (window-buffer)
+              (emacspeak-speak-mode-line))))))
 
 ;;}}}
 ;;{{{ Additional commands to advice:
 
+(cl-loop for f in
+      '(magit-add-log
+        magit-log-edit
+        magit-process-buffer
+        magit-annotated-tag)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'open-object)))))
+
+(cl-loop for f in
+      '(magit-log-edit-commit
+        with-editor-cancel)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'close-object)))))
+
+(defadvice magit-rebase-interactive (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (and (ems-interactive-p ) (derived-mode-p 'magit-log-select-mode))
+    (emacspeak-auditory-icon 'open-object)
+    (emacspeak-speak-mode-line)))
+
 (defadvice magit-display-process (after emacspeak pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
     (emacspeak-auditory-icon 'open-object)
     (message "Displayed process buffer in other window.")))
 
-(defadvice magit-refresh (after emacspeak pre act comp)
-  "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'task-done)
-    (emacspeak-speak-line)))
+(cl-loop for f in
+      '(magit-refresh
+        magit-refresh-all
+        magit-change-what-branch-tracks
+        magit-tag
+        magit-diff
+        magit-diff-with-mark
+        magit-diff-working-tree
+        magit-diff-dwim
+        magit-diff-staged
+        magit-diff-unstaged
+        magit-diff-while-committing
+        magit-diff-paths
+        magit-reverse
+        magit-apply
+        magit-apply-item
+        magit-cherry-pick-item
+        magit-stage-all
+        magit-stage-modified
+        magit-unstage-all
+        magit-reset
+        magit-reset-soft
+        magit-reset-hard
+        magit-reset-head
+        magit-reset-working-tree
+        magit-checkout
+        magit-branch
+        magit-branch-and-checkout
+        magit-branch-spinoff
+        magit-branch-reset
+        magit-branch-rename
+        magit-create-branch
+        magit-merge
+        magit-automatic-merge
+        magit-manual-merge
+        magit-merge-editmsg
+        magit-merge-nocommit
+        magit-merge-preview
+        magit-merge-abort
+        magit-rebase-step
+        magit-rewrite-start
+        magit-rewrite-stop
+        magit-rewrite-finish
+        magit-rewrite-abort
+        magit-rewrite-set-used
+        magit-rewrite-set-unused
+        magit-format-patch
+        magit-am-abort
+        magit-branches-window-checkout)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'task-done)))))
 
-(defadvice magit-status (after emacspeak pre act  comp)
-  "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'open-object)
-    (emacspeak-speak-line)))
+;;}}}
+;;{{{ Advise process-sentinel:
 
-(cl-loop
- for f in
- '(magit-mode-quit-window magit-mode-bury-buffer magit-log-bury-buffer)
- do
- (eval
-  `(defadvice ,f (after emacspeak pre act  comp)
-     "Provide auditory feedback."
-     (when (ems-interactive-p)
-       (with-current-buffer (window-buffer (selected-window))
-         (emacspeak-auditory-icon 'close-object)
-         (emacspeak-speak-mode-line))))))
+(defadvice magit-process-finish (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (let ((arg (ad-get-arg 0)))
+    (unless (integerp arg)
+      (setq arg (process-exit-status arg)))
+    (unless (= arg 0)
+      (emacspeak-auditory-icon 'warn-user))))
 
-(defadvice magit-refresh-all (after emacspeak pre act comp)
+(defadvice magit-process-sentinel (after emacspeak pre act comp)
   "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'task-done)
-    (emacspeak-speak-line)))
+  (emacspeak-auditory-icon 'task-done))
 
 ;;}}}
 ;;{{{ Branches:
 
-(defadvice magit-remove-branch (after emacspeak pre act comp)
-  "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'delete-object)
-    (emacspeak-speak-line)))
+(cl-loop for f in
+      '(magit-remove-branch
+        magit-remove-branch-in-remote-repo
+        magit-branch-delete
+        magit-tag-delete
+        magit-revert-item
+        magit-discard
+        magit-discard-item)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'delete-object)
+            (emacspeak-speak-line)))))
 
-(defadvice magit-remove-branch-in-remote-repo (after emacspeak pre act comp)
-  "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'delete-object)
-    (emacspeak-speak-line)))
+;;}}}
+;;{{{ Setting Command Options:
 
-(defadvice magit-change-what-branch-tracks (after emacspeak pre
-                                                  act comp)
+(defadvice magit-key-mode-add-option (after emacspeak pre act comp) 
+  "Provide auditory feedback."
+  (let ((for-group (ad-get-arg 0))
+        (option-name (ad-get-arg 1)))
+    (cond
+     ((not (member option-name magit-key-mode-current-options))
+      (emacspeak-auditory-icon 'delete-object)
+      (message "Removed %s for %s" option-name for-group))
+     (t (emacspeak-auditory-icon 'select-object)
+        (message "Added %s for %s" option-name for-group)))))
+
+(defadvice magit-key-mode-exec-at-point (after emacspeak pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'task-done)
-    (emacspeak-speak-line)))
-
-;;}}}
-;;{{{ Advise process-sentinel:
-
-(defadvice magit-process-finish(after emacspeak pre act comp)
-  "Produce auditory icon."
-  (emacspeak-auditory-icon 'task-done))
+    (emacspeak-auditory-icon 'button)))
+
+(defsubst emacspeak-magit-key-mode-header-line ()
+  "Currently set options and args for use in header-line."
+  (cl-declare (special magit-key-mode-current-options magit-key-mode-current-args))
+  (let ((options
+         (mapconcat
+          #'identity
+          magit-key-mode-current-options
+          " "))
+        (args
+         (mapconcat
+          #'identity
+          (cl-loop for k being the hash-keys of magit-key-mode-current-args
+                collect
+                (format "%s %s"
+                        k (gethash k magit-key-mode-current-args)))
+          " ")))
+    (format "%s %s" options args)))    
+
+(defadvice magit-key-mode-add-argument (after emacspeak pre act comp)
+  "Speak header line where we accumulate and reflect current state."
+  (emacspeak-speak-header-line))
+(defadvice magit-key-mode-command (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (emacspeak-auditory-icon 'button)
+  (emacspeak-speak-line))
+
+(defadvice magit-key-mode(after emacspeak pre act comp)
+  "Provide auditory icon."
+  (setq header-line-format
+        '(:eval (emacspeak-magit-key-mode-header-line)))
+  (emacspeak-auditory-icon 'open-object))
 
 ;;}}}
 ;;{{{ Magit Blame:
