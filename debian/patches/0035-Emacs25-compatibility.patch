From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Tue, 22 Nov 2022 14:10:53 +0300
Subject: Emacs25 compatibility

---
 lisp/dom-addons.el        | 16 ++++++++++++++++
 lisp/emacspeak-info.el    | 10 +++++++---
 lisp/emacspeak-org.el     |  2 +-
 lisp/emacspeak-tar.el     |  5 +++++
 lisp/emacspeak-wizards.el | 17 ++++++++++++-----
 5 files changed, 41 insertions(+), 9 deletions(-)

diff --git a/lisp/dom-addons.el b/lisp/dom-addons.el
index 41f6377..56120fe 100644
--- a/lisp/dom-addons.el
+++ b/lisp/dom-addons.el
@@ -49,6 +49,7 @@
 
 (require 'cl-lib)
 (cl-declaim  (optimize  (safety 0) (speed 3)))
+(require 'xml)
 (require 'dom)
 (require 'g-utils)
 ;;}}}
@@ -148,6 +149,21 @@ ATTRIBUTE would typically be `class', `id' or the like."
 
 ;;}}}
 ;;{{{DOM From URL:
+
+(eval-and-compile
+  (unless (fboundp 'xml-remove-comments)
+    (defun xml-remove-comments (beg end)                                         
+      "Remove XML/HTML comments in the region between BEG and END.
+All text between the <!-- ... --> markers will be removed."
+      (save-excursion
+        (save-restriction
+          (narrow-to-region beg end)
+          (goto-char beg)
+          (while (search-forward "<!--" nil t)
+            (let ((start (match-beginning 0)))
+              (when (search-forward "-->" nil t)
+                (delete-region start (point))))))))))
+
 (defun dom-from-url (url)
   "Return DOM for HTML content at URL."
   (cl-declare (special g-curl-program g-curl-common-options))
diff --git a/lisp/emacspeak-info.el b/lisp/emacspeak-info.el
index e2949e3..9cefd8c 100644
--- a/lisp/emacspeak-info.el
+++ b/lisp/emacspeak-info.el
@@ -178,9 +178,13 @@ node-spec."
           (f nil)
           (n nil))
       (info-initialize)
-      (setq f (completing-read "File: " (info--manual-names nil) nil t))
-      (setq n (completing-read "Node: " (Info-build-node-completions f)))
-      (format "(%s)%s" f n))))
+      (setq f
+            (when (fboundp 'info--manual-names)
+              (completing-read "File: " (info--manual-names nil) nil t)))
+      (setq n (completing-read "Node: " (apply 'Info-build-node-completions (and f (list f)))))
+      (if f
+          (format "(%s)%s" f n)
+        n))))
   (Info-goto-node node-spec)
   (emacspeak-info-visit-node))
 
diff --git a/lisp/emacspeak-org.el b/lisp/emacspeak-org.el
index b2c66df..36e4781 100644
--- a/lisp/emacspeak-org.el
+++ b/lisp/emacspeak-org.el
@@ -634,7 +634,7 @@ and assign  letter `h' to a template that creates the hyperlink on capture."
     (org-store-link-props
      :type "eww"
      :link   (emacspeak-eww-current-url)
-     :url (eww-current-url)
+     :url (emacspeak-eww-current-url)
      :description (emacspeak-eww-current-title))))
 
 ;;}}}
diff --git a/lisp/emacspeak-tar.el b/lisp/emacspeak-tar.el
index 8fbe774..7c9a8c9 100644
--- a/lisp/emacspeak-tar.el
+++ b/lisp/emacspeak-tar.el
@@ -51,6 +51,11 @@
 ;;}}}
 ;;{{{ Helpers
 
+(declare-function tar-desc-tokens (x))
+
+(unless (fboundp 'tar-desc-tokens)
+  (defun tar-desc-tokens (x) x))
+
 (defun emacspeak-tar-speak-line ()
   "Speak line in tar mode intelligently"
   (cond
diff --git a/lisp/emacspeak-wizards.el b/lisp/emacspeak-wizards.el
index db009ff..4533171 100644
--- a/lisp/emacspeak-wizards.el
+++ b/lisp/emacspeak-wizards.el
@@ -107,7 +107,9 @@
     emacspeak-etc-directory))
   (emacspeak-auditory-icon 'news)
   (org-mode)
-  (org-next-visible-heading 1)
+  (if (fboundp 'org-next-visible-heading)
+      (org-next-visible-heading 1)
+    (outline-next-visible-heading 1))
   (emacspeak-speak-line))
 
 ;;;###autoload
@@ -3354,7 +3356,7 @@ access to the various functions provided by alpha-vantage."
     (with-current-buffer (find-file-noselect filename)
       (goto-char (point-min))
       (prog1
-          (json-parse-buffer :object-type 'alist)
+          (json-parse-string (buffer-string) :object-type 'alist)
         (kill-buffer ))))
    (t (json-read-file filename))))
 
@@ -4246,9 +4248,12 @@ external package."
 ;;{{{ Use Threads To Call Command Asynchronously:
 ;;;Experimental: Handle with care.
 
+(declare-function make-thread (command))
+
 ;;;###autoload
 (defun emacspeak-wizards-execute-asynchronously (key)
-  "Read key-sequence, then execute its command on a new thread."
+  "Read key-sequence, then execute its command on a new thread.
+If threads are not supported, command is executed synchronously."
   (interactive (list (read-key-sequence "Key Sequence: ")))
   (let ((l (local-key-binding key))
         (g (global-key-binding key))
@@ -4257,8 +4262,10 @@ external package."
                    (lookup-key map key))))
     (cl-flet
         ((do-it (command)
-                (make-thread command)
-                (message "Running %s on a new thread." command)))
+                (if (not (fboundp 'make-thread))
+                    (funcall command)
+                  (make-thread command)
+                  (message "Running %s on a new thread." command))))
       (cond
        ((commandp k) (do-it k))
        ((commandp l) (do-it l))
