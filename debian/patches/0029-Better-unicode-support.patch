From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Fri, 25 Nov 2022 15:57:08 +0300
Subject: Better unicode support

---
 lisp/dtk-unicode.el      | 50 +++++++++++++++++++++++++++++++-----------------
 lisp/emacspeak-advice.el | 22 +++++++++++----------
 lisp/emacspeak-speak.el  | 20 ++++++++++---------
 3 files changed, 55 insertions(+), 37 deletions(-)

diff --git a/lisp/dtk-unicode.el b/lisp/dtk-unicode.el
index 389eefa..6ed9179 100644
--- a/lisp/dtk-unicode.el
+++ b/lisp/dtk-unicode.el
@@ -71,7 +71,9 @@
   '(
     (? . "-")                       ; START OF GUARDED AREA
     (?━ . "-")                          ; horiz bars
+    (?─ .  "-")                     ; horiz bar
     (?┃ . "|")                          ; vertical block
+    (?│ . "|")                      ; vertical bar
     (?° . " degrees ")                  ; degree sign
     (?℃ . "Degree C")                   ; celsius
     (?℉ . "Degree F ")                  ; Fahrenheit
@@ -131,10 +133,8 @@ themselves, e.g., when using an Asian language."
 ;;}}}
 ;;{{{ Variables
 
-(defcustom dtk-unicode-untouched-charsets
-  '(ascii latin-iso8859-1)
-  "*Characters of these charsets are completely ignored by dtk-unicode-replace-chars."
-  :type '(repeat symbol))
+(defvar dtk-unicode-charset-filter-regexp nil
+  "Regular expression that matches characters not in dtk-unicode-untouched-charsets.")
 
 (defvar dtk-unicode-handlers
   '(dtk-unicode-user-table-handler dtk-unicode-full-table-handler)
@@ -169,14 +169,27 @@ A handler returns a non-nil value if the   replacement was successful, nil other
                    when (charsetp charset)
                    concat (apply 'format "%c-%c" (dtk-unicode-charset-limits charset)))))
 
-(defvar dtk-unicode-charset-filter-regexp
-  (dtk-unicode-build-skip-regexp dtk-unicode-untouched-charsets)
-  "Regular exppression that matches characters not in dtk-unicode-untouched-charsets.")
+(defcustom dtk-unicode-untouched-charsets
+  '(ascii latin-iso8859-1)
+  "*Characters of these charsets are completely ignored by dtk-unicode-replace-chars.
+Currently active speech server tries to take care of this option
+while it is not customized explicitly by user."
+  :group 'dtk-unicode
+  :type (list 'repeat
+              (let ((menu '(choice)))
+                (dolist (item charset-list menu)
+                  (push (list 'const item) menu))
+                (nreverse menu)))
+  :set (lambda (symbol value)
+         (setq dtk-unicode-charset-filter-regexp (dtk-unicode-build-skip-regexp value))
+         (custom-set-default symbol value)))
 
 (defun dtk-unicode-update-untouched-charsets (charsets)
   "Update list of charsets we will not touch."
-  (setq dtk-unicode-untouched-charsets charsets)
-  (setq dtk-unicode-charset-filter-regexp (dtk-unicode-build-skip-regexp dtk-unicode-untouched-charsets)))
+  (unless (or (get 'dtk-unicode-untouched-charsets 'customized-value)
+              (get 'dtk-unicode-untouched-charsets 'saved-value))
+    (setq dtk-unicode-untouched-charsets charsets
+          dtk-unicode-charset-filter-regexp (dtk-unicode-build-skip-regexp charsets))))
 
 (eval-and-compile
   (defmacro dtk--with-charset-priority (charsets &rest body)
@@ -216,14 +229,14 @@ charsets returned by operations such as `find-charset-region'."
 (defun dtk-unicode-name-for-char (char)
   "Return unicode name for character CHAR.
 nil if CHAR is not in Unicode."
-  (cond
-   ((= char 128) "")
-   (t
-    (downcase
-     (or
-      (get-char-code-property char 'name)
-      (get-char-code-property char 'old-name)
-      (format "%c" char))))))
+  (let ((name (or (get-char-code-property char 'name)
+                  (car (rassoc char (ucs-names)))
+                  (dtk-unicode-char-property char "Name"))))
+    (when (and (stringp name) (string-equal name "<control>"))
+      (setq name (dtk-unicode-char-property char "Old name")))
+    (and (stringp name)
+         (downcase name))))
+
 (defun dtk-unicode-char-properties (char)
   "Return unicode properties for CHAR."
   (let ((unicode (encode-char char 'ucs)))
@@ -318,7 +331,8 @@ Does nothing for unibyte buffers."
                          (dtk-unicode-char-punctuation-p char))
                         " "
                       (run-hook-with-args-until-success 'dtk-unicode-handlers char)))))
-            (replace-match replacement t t nil)
+            (when replacement
+              (replace-match replacement t t nil))
             (when props
               (set-text-properties pos (point) props))))))))
 
diff --git a/lisp/emacspeak-advice.el b/lisp/emacspeak-advice.el
index 545f017..05c6585 100644
--- a/lisp/emacspeak-advice.el
+++ b/lisp/emacspeak-advice.el
@@ -904,16 +904,18 @@ icon."
  (eval
   `(defadvice ,f (before emacspeak pre act comp)
      "Speak the prompt"
-     (let ((prompt (ad-get-arg 0))
-           (dtk-stop-immediately nil))
-       (emacspeak-auditory-icon 'item)
-       (setq emacspeak-last-message prompt)
-       (setq emacspeak-read-char-prompt-cache prompt)
-       (tts-with-punctuations
-        'all
-        (dtk-speak
-         (or prompt
-             (substring ,(symbol-name f) 5))))))))
+     (let ((prompt (ad-get-arg 0)))
+       (when prompt
+         (when dtk-stop-immediately
+           (dtk-stop))
+         (let ((dtk-stop-immediately nil))
+           (emacspeak-auditory-icon 'item)
+           (setq emacspeak-last-message prompt)
+           (setq emacspeak-read-char-prompt-cache prompt)
+           (tts-with-punctuations
+               'all
+             (dtk-speak
+              prompt))))))))
 
 (defadvice read-char-choice (before emacspeak pre act comp)
   "Speak the prompt"
diff --git a/lisp/emacspeak-speak.el b/lisp/emacspeak-speak.el
index 60135a3..5f687fd 100644
--- a/lisp/emacspeak-speak.el
+++ b/lisp/emacspeak-speak.el
@@ -1188,8 +1188,7 @@ spelled out  instead of being spoken."
 
 (defun emacspeak-is-alpha-p (c)
   "Check if argument C is an alphabetic character."
-  (and (= ?w (char-syntax c))
-       (dtk-unicode-char-untouched-p c)))
+  (= ?w (char-syntax c)))
 
 ;;{{{  phonemic table
 
@@ -1263,11 +1262,15 @@ spelled out  instead of being spoken."
   "Return the phonetic string for this CHAR or its upper case equivalent.
 char is assumed to be one of a--z."
   (cl-declare (special emacspeak-char-to-phonetic-table))
-  (let ((char-string (char-to-string char)))
-    (or (cdr
-         (assoc char-string emacspeak-char-to-phonetic-table))
-        (dtk-unicode-full-name-for-char char)
-        " ")))
+  (let ((char-string (char-to-string
+                      (if (equal (char-charset char) 'cyrillic-iso8859-5)
+                          (make-char 'mule-unicode-0100-24ff 40
+                                     (cadr (split-char char)))
+                        char))))
+    (or   (cdr
+           (assoc char-string emacspeak-char-to-phonetic-table))
+          (dtk-unicode-full-name-for-char char)
+          " ")))
 
 ;;}}}
 ;;{{{ Speak Chars:
@@ -1277,8 +1280,8 @@ char is assumed to be one of a--z."
   (when char
     (cond
      ((emacspeak-is-alpha-p char) (dtk-letter (char-to-string char)))
-     ((> char 128) (emacspeak-speak-char-name char))
      (t (dtk-dispatch (dtk-char-to-speech char))))))
+
 ;;;###autoload
 (defun emacspeak-speak-char (&optional prefix)
   "Speak character under point.
@@ -1294,7 +1297,6 @@ Pronounces character phonetically unless  called with a PREFIX arg."
     (when char
       (cond
        ((stringp display) (dtk-speak display))
-       ((> char 128) (emacspeak-speak-char-name char))
        ((and (not prefix)
              (emacspeak-is-alpha-p char))
         (dtk-speak (emacspeak-get-phonetic-string char)))
