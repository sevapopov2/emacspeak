From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Thu, 24 Nov 2022 12:04:30 +0300
Subject: Emms support enhancement

---
 lisp/emacspeak-emms.el | 300 ++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 247 insertions(+), 53 deletions(-)

diff --git a/lisp/emacspeak-emms.el b/lisp/emacspeak-emms.el
index d645927..454c15d 100644
--- a/lisp/emacspeak-emms.el
+++ b/lisp/emacspeak-emms.el
@@ -70,49 +70,220 @@
   "Speak current track."
   (interactive)
   (message
-   (cdr (assq 'name (emms-playlist-current-selected-track)))))
-
-(cl-loop for f in
-         '(emms-next emms-next-noerror emms-previous)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Speak track name."
-             (when (ems-interactive-p)
-               (emacspeak-auditory-icon 'select-object)))))
+   (emms-track-name (emms-playlist-current-selected-track))))
 
 ;;; these commands should not be made to talk since that would  interferes
 ;;; with real work.
 (cl-loop for f in
-         '(emms-start emms-stop emms-sort
-                      emms-shuffle emms-random)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory icon."
-             (when (ems-interactive-p)
-               (emacspeak-auditory-icon 'select-object)))))
+      '(emms-start
+        emms-stop
+        emms-sort
+        emms-shuffle
+        emms-random
+        emms-next
+        emms-next-noerror
+        emms-previous)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory icon."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'select-object)))))
 
 (cl-loop for f in
-         '(emms-playlist-first emms-playlist-last
-                               emms-playlist-mode-first emms-playlist-mode-last)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory feedback."
-             (when (ems-interactive-p)
-               (emacspeak-auditory-icon 'large-movement)
-               (emacspeak-speak-line)))))
+      '(emms-playlist-first
+        emms-playlist-last
+        emms-playlist-mode-first
+        emms-playlist-mode-last
+        emms-tag-editor-prev-field
+        emms-tag-editor-next-field
+        emms-tag-editor-prev-track
+        emms-tag-editor-next-track
+        emms-browser-toggle-subitems
+        emms-browser-collapse-all
+        emms-browser-expand-to-level-2
+        emms-browser-expand-to-level-3
+        emms-browser-expand-to-level-4
+        emms-browser-expand-all
+        emms-browser-goto-random
+        emms-browser-prev-non-track
+        emms-browser-next-non-track)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'large-movement)
+            (emacspeak-speak-line)))))
+
 (cl-loop for f in
-         '(emms-browser emms-browser-next-filter
-                        emms-browser-previous-filter)
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory feedback."
-             (when (ems-interactive-p)
-               (emacspeak-speak-mode-line)
-               (emacspeak-auditory-icon 'open-object)))))
+      '(emms
+        emms-browser
+        emms-browser-next-filter
+        emms-browser-previous-filter
+        emms-browser-view-in-dired
+        emms-browse-by-artist
+        emms-browse-by-album
+        emms-browse-by-genre
+        emms-browse-by-year
+        emms-browse-by-composer
+        emms-browse-by-performer
+        emms-streams
+        emms-stream-popup
+        emms-stream-popup-revert
+        emms-playlist-mode-go
+        emms-playlist-mode-goto-dired-at-point
+        emms-tag-editor-edit
+        emms-playlist-set-playlist-buffer
+        emms-metaplaylist-mode-go
+        emms-metaplaylist-mode-goto-current)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'open-object)
+            (emacspeak-speak-mode-line)))))
+
+(defadvice emms-toggle-repeat-playlist (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon (if emms-repeat-playlist 'on 'off))))
+
+(defadvice emms-toggle-repeat-track (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon (if emms-repeat-track 'on 'off))))
+
+(cl-loop for f in
+      '(emms-playlist-save
+        emms-tag-editor-submit)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p )
+            (emacspeak-auditory-icon 'save-object)))))
+
+(cl-loop for f in
+      '(emms-playlist-mode-clear
+        emms-browser-clear-playlist
+        emms-browser-delete-files)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p )
+            (emacspeak-auditory-icon 'delete-object)))))
+
+(cl-loop for f in
+      '(emms-playlist-mode-add-contents
+        emms-browser-add-tracks)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p )
+            (emacspeak-auditory-icon 'yank-object)))))
+
+;;}}}
+;;{{{ Interactive playlists:
+
+(cl-loop for f in
+      '(emms-playlist-mode-kill-track
+        emms-playlist-mode-kill-entire-track
+        emms-stream-delete-bookmark)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'delete-object)
+            (emacspeak-speak-line)))))
+
+(defadvice emms-playlist-mode-insert-newline (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-speak-line)))
+
+(defadvice emms-playlist-mode-kill (around emacspeak pre act comp)
+  "Indicate region has been killed. Use an auditory icon if possible."
+  (if (ems-interactive-p)
+      (let ((count (count-lines (region-beginning) (region-end))))
+        ad-do-it
+        (emacspeak-auditory-icon 'delete-object )
+        (message "Killed region containing %s lines" count))
+    ad-do-it)
+  ad-return-value)
+
+(cl-loop for f in
+      '(emms-playlist-mode-yank
+        emms-playlist-mode-yank-pop)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Say what you yanked.
+Produce an auditory icon if possible."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'yank-object )
+            (emacspeak-speak-region (mark 'force) (point))))))
+
+(defadvice emms-playlist-mode-undo (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'unmodified-object)))
+
+(cl-loop for f in
+      '(emms-playlist-sort-by-info-composer
+        emms-playlist-sort-by-list
+        emms-playlist-sort-by-name
+        emms-playlist-sort-by-info-artist
+        emms-playlist-sort-by-info-album
+        emms-playlist-sort-by-play-count
+        emms-playlist-sort-by-file-extension
+        emms-playlist-sort-by-last-played
+        emms-playlist-sort-by-natural-order
+        emms-playlist-sort-by-info-note
+        emms-playlist-sort-by-info-performer
+        emms-playlist-sort-by-info-title
+        emms-playlist-sort-by-info-year)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'task-done)
+            (emacspeak-speak-mode-line)))))
+
+;;}}}
+;;{{{ Markable playlists:
+
+(defadvice emms-mark-forward (after emacspeak pre act comp)
+  "Give speech feedback. Also provide an auditory icon."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'mark-object )
+    (emacspeak-speak-line)))
+
+(defadvice emms-mark-unmark-forward (after emacspeak pre act comp)
+  "Give speech feedback. Also provide an auditory icon."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'deselect-object )
+    (emacspeak-speak-line)))
+
+(defadvice emms-mark-copy-marked-tracks (after emacspeak pre act comp)
+  "Produce an auditory icon if possible."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'mark-object )))
+
+(cl-loop for f in
+      '(emms-mark-kill-marked-tracks
+        emms-mark-delete-marked-tracks)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Produce an auditory icon if possible."
+          (when (ems-interactive-p )
+            (emacspeak-auditory-icon 'delete-object)))))
 
 (defadvice emms-browser-bury-buffer (after emacspeak pre act comp)
   "Provide auditory feedback."
@@ -128,13 +299,6 @@
   (define-key emms-stream-mode-map "\C-e"
     'emacspeak-prefix-command))
 
-(defadvice emms-stream-delete-bookmark (after emacspeak pre act
-                                              comp)
-  "Provide auditory feedback."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'delete-object)
-    (emacspeak-speak-line)))
-
 (defadvice emms-stream-save-bookmarks-file (after emacspeak pre act comp)
   "Provide auditory feedback."
   (when (ems-interactive-p)
@@ -142,16 +306,18 @@
     (message "Saved stream bookmarks.")))
 
 (cl-loop for f in
-         '(emms-streams emms-stream-quit
-                        emms-stream-popup emms-stream-popup-revert
-                        emms-playlist-mode-go
-                        )
-         do
-         (eval
-          `(defadvice ,f (after emacspeak pre act comp)
-             "Provide auditory feedback."
-             (when (ems-interactive-p)
-               (emacspeak-speak-mode-line)))))
+      '(emms-stream-quit
+        emms-playlist-mode-bury-buffer
+        emms-playlist-mode-current-kill
+        emms-tag-editor-submit-and-exit
+        emms-browser-bury-buffer)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Provide auditory feedback."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'close-object)
+            (emacspeak-speak-mode-line)))))
 
 (cl-loop for f in
          '(emms-stream-next-line emms-stream-previous-line)
@@ -178,6 +344,15 @@
    ad-do-it))
 
 ;;}}}
+;;{{{ Browser buffer voicification:
+
+(defadvice emms-browser-format-spec (around emacspeak pre act comp)
+  "Properly voicify buffer."
+  (let ((text-property-default-nonsticky (remove (assq 'personality text-property-default-nonsticky) text-property-default-nonsticky)))
+    ad-do-it)
+  ad-return-value)
+
+;;}}}
 ;;{{{ pause/resume if needed
 
 ;;;###autoload
@@ -192,6 +367,25 @@ emacspeak-silence-hook."
 (add-hook 'emacspeak-silence-hook 'emacspeak-emms-pause-or-resume)
 
 ;;}}}
+;;{{{ Define personalities
+
+(voice-setup-add-map
+ '(
+   (emms-metaplaylist-mode-face voice-bolden-medium)
+   (emms-metaplaylist-mode-current-face voice-animate)
+   (emms-playlist-track-face voice-bolden)
+   (emms-playlist-selected-face voice-animate)
+   (emms-stream-name-face voice-bolden)
+   (emms-stream-url-face voice-lighten)
+   (emms-browser-year/genre-face voice-lighten)
+   (emms-browser-artist-face voice-lighten-and-animate)
+   (emms-browser-composer-face voice-lighten-and-animate)
+   (emms-browser-performer-face voice-lighten-and-animate)
+   (emms-browser-album-face voice-bolden-medium)
+   (emms-browser-track-face voice-bolden)
+   ))
+
+;;}}}
 (provide 'emacspeak-emms)
 ;;{{{ end of file
 
