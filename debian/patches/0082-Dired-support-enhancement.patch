From: "Igor B. Poretsky" <poretsky@rakurs.com>
Date: Thu, 24 Nov 2022 09:59:39 +0300
Subject: Dired support enhancement

---
 lisp/emacspeak-dired.el | 274 ++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 231 insertions(+), 43 deletions(-)

diff --git a/lisp/emacspeak-dired.el b/lisp/emacspeak-dired.el
index ce300e3..686daa9 100644
--- a/lisp/emacspeak-dired.el
+++ b/lisp/emacspeak-dired.el
@@ -76,11 +76,13 @@
 (defun emacspeak-dired-speak-line ()
   "Speak the dired line intelligently."
   (cl-declare (special emacspeak-speak-last-spoken-word-position))
-  (let ((filename (dired-get-filename 'no-dir  t))
+  (let ((filename (dired-get-filename 'verbatim  t))
         (personality (dtk-get-style)))
     (cond
      (filename
-      (dtk-speak (propertize filename 'personality personality))
+      (dtk-speak (propertize (directory-file-name
+                              (file-relative-name filename))
+                             'personality personality))
       (setq emacspeak-speak-last-spoken-word-position (point)))
      (t (emacspeak-speak-line)))))
 
@@ -100,6 +102,123 @@
    (t ad-do-it))
   ad-return-value)
 
+(defadvice dired-change-marks (around emacspeak pre act comp)
+  "Provide auditory feedback."
+  (if (ems-interactive-p)
+      (let ((emacspeak-speak-messages t))
+	ad-do-it
+	(emacspeak-auditory-icon 'select-object))
+    ad-do-it)
+  ad-return-value)
+
+(defadvice dired-do-toggle (after emacspeak pre act comp)
+  "Produce auditory icon."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'select-object)))
+
+(cl-loop for f in
+      '(dired-flag-auto-save-files dired-flag-backup-files)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act )
+	  "Produce an auditory icon indicating that files
+were marked or unmarked for deletion."
+	  (when (ems-interactive-p )
+	    (if (ad-get-arg 0)
+		(emacspeak-auditory-icon 'deselect-object)
+	      (emacspeak-auditory-icon 'delete-object))))))
+
+(cl-loop for f in
+      '(dired-mark-symlinks dired-mark-directories dired-mark-executables)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act )
+	  "Produce an auditory icon indicating that files were marked or unmarked."
+	  (when (ems-interactive-p )
+	    (if (ad-get-arg 0)
+		(emacspeak-auditory-icon 'deselect-object)
+	      (emacspeak-auditory-icon 'mark-object))))))
+
+(cl-loop for f in
+      '(dired-flag-garbage-files dired-clean-directory)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act )
+	  "Produce an auditory icon indicating that files were marked for deletion."
+	  (when (ems-interactive-p )
+	    (emacspeak-auditory-icon 'delete-object)))))
+
+(defadvice dired-undo  (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p)
+    (if (buffer-modified-p)
+        (emacspeak-auditory-icon 'modified-object)
+      (emacspeak-auditory-icon 'unmodified-object ))
+    (emacspeak-dired-speak-line)))
+
+(cl-loop for f in
+      '(dired-summary dired-show-file-type)
+      do
+      (eval
+       `(defadvice ,f (around emacspeak pre act comp)
+	  "Provide auditory feedback."
+	  (if (ems-interactive-p)
+	      (let ((emacspeak-speak-messages t)
+                    (emacspeak-last-message nil)
+                    (inhibit-message nil))
+		(emacspeak-auditory-icon 'select-object)
+		ad-do-it)
+	    ad-do-it)
+	  ad-return-value)))
+
+(defadvice dired-do-search (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'open-object)
+    (emacspeak-speak-line)))
+
+(cl-loop for f in
+      '(dired-do-byte-compile dired-do-load)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+	  "Produce auditory icon."
+	  (when (ems-interactive-p )
+	    (emacspeak-auditory-icon 'task-done)))))
+
+(defadvice dired-maybe-insert-subdir  (after emacspeak pre act comp)
+  "Provide auditory feedback."
+  (when (ems-interactive-p)
+    (emacspeak-auditory-icon 'yank-object)
+    (emacspeak-dired-speak-line)))
+
+(defadvice dired-do-kill-lines (before emacspeak pre act comp)
+  "Speak item before killing it. "
+  (when (ems-interactive-p)
+    (emacspeak-auditory-icon 'delete-object)
+    (when dtk-stop-immediately (dtk-stop))
+    (let ((dtk-stop-immediately nil))
+      (dtk-tone 500 30)
+      (emacspeak-dired-speak-line))))
+
+(defadvice dired-copy-filename-as-kill (after emacspeak pre act comp)
+  "Produce an auditory icon if possible."
+  (when (ems-interactive-p )
+    (emacspeak-auditory-icon 'mark-object )))
+
+(defadvice dired-do-query-replace-regexp (around emacspeak pre act comp)
+  "Stop message from chattering.
+Turn on voice lock temporarily.
+Provide auditory icon when finished."
+  (cl-declare (special voice-lock-mode
+                    global-voice-lock-mode))
+  (let ((voice-lock-mode global-voice-lock-mode)
+        (emacspeak-speak-messages nil))
+    (dtk-stop)
+    (unwind-protect
+        ad-do-it
+      (emacspeak-auditory-icon 'task-done))))
+
 (defadvice dired-query (before emacspeak pre act comp)
   "Produce auditory icon."
   (emacspeak-auditory-icon 'ask-short-question))
@@ -110,8 +229,18 @@
     (emacspeak-auditory-icon 'close-object)
     (emacspeak-speak-mode-line)))
 
+(defadvice dired-up-directory (after emacspeak pre act)
+  "Produce an auditory icon."
+  (when (ems-interactive-p )
+    (ems-with-messages-silenced
+     (emacspeak-dired-label-fields))
+    (emacspeak-auditory-icon 'open-object )
+    (emacspeak-speak-mode-line)))
+
 (defun emacspeak-dired-initialize ()
   "Set up emacspeak dired."
+  (cl-declare (special global-voice-lock-mode))
+  (voice-lock-mode (if global-voice-lock-mode 1 -1))
   (emacspeak-dired-label-fields)
   (emacspeak-dired-setup-keys))
 (cl-loop
@@ -127,23 +256,39 @@
        (emacspeak-auditory-icon 'open-object)
        (emacspeak-speak-mode-line)))))
 
-(defadvice dired-find-file  (around  emacspeak pre act)
+(defadvice dired-omit-mode (after emacspeak pre act comp)
   "Produce an auditory icon."
-  (cond
-   ((ems-interactive-p)
-    (let ((directory-p (file-directory-p (dired-get-filename t t))))
-      ad-do-it
-      (when directory-p (emacspeak-dired-label-fields))
-      (emacspeak-speak-mode-line)
-      (emacspeak-auditory-icon 'open-object)))
-   (t ad-do-it))
-  ad-return-value)
+  (when (ems-interactive-p)
+    (emacspeak-auditory-icon
+     (if dired-omit-mode
+         'on
+       'off))))
+
+(cl-loop for f in
+      '(dired-find-file
+	dired-find-file-other-window
+	dired-display-file
+	dired-view-file)
+      do
+      (eval
+       `(defadvice ,f  (around  emacspeak pre act comp)
+          "Produce an auditory feedback."
+          (cond
+           ((ems-interactive-p)
+            (let ((directory-p (file-directory-p (dired-get-filename t t))))
+              ad-do-it
+              (when directory-p
+                (emacspeak-dired-label-fields))
+              (emacspeak-speak-mode-line)
+              (emacspeak-auditory-icon 'open-object)))
+           (t ad-do-it))
+          ad-return-value)))
 
 (cl-loop
  for  f in
  '(
    dired-next-subdir dired-prev-subdir
-   dired-tree-up dired-tree-down dired-up-directory
+   dired-tree-up dired-tree-down
    dired-next-marked-file dired-prev-marked-file
    dired-next-dirline dired-prev-dirline
    dired-jump
@@ -158,15 +303,20 @@
 
 (cl-loop
  for f in
- '(dired-next-line dired-previous-line
-                   dired-unmark-backward dired-maybe-insert-subdir)
+ '(dired-next-line dired-previous-line)
  do
  (eval
-  `(defadvice ,f  (after emacspeak pre act)
-     "Speak the filename name."
-     (when (ems-interactive-p)
-       (emacspeak-auditory-icon 'select-object)
-       (emacspeak-dired-speak-line)))))
+  `(defadvice ,f (around emacspeak pre act comp)
+     "Speak the file name. Produce auditory icon  if we cant move."
+     (if (ems-interactive-p)
+         (let ((n (line-number-at-pos)))
+           ad-do-it
+           (if (= (line-number-at-pos) n)
+               (emacspeak-auditory-icon 'warn-user)
+             (emacspeak-auditory-icon 'select-object)
+             (emacspeak-dired-speak-line))
+           ad-return-value)
+       ad-do-it))))
 
 ;;; Producing auditory icons:
 ;;; These dired commands do some action that causes a state change:
@@ -188,11 +338,15 @@
     (emacspeak-auditory-icon 'delete-object)
     (emacspeak-dired-speak-line)))
 
-(defadvice dired-unmark (after emacspeak pre act)
-  "Give speech feedback. Also provide an auditory icon."
-  (when (ems-interactive-p)
-    (emacspeak-auditory-icon 'deselect-object)
-    (emacspeak-dired-speak-line)))
+(cl-loop for f in
+      '(dired-unmark dired-unmark-backward)
+      do
+      (eval
+       `(defadvice ,f (after emacspeak pre act comp)
+          "Give speech feedback. Also provide an auditory icon."
+          (when (ems-interactive-p)
+            (emacspeak-auditory-icon 'deselect-object)
+            (emacspeak-dired-speak-line)))))
 
 ;;}}}
 ;;{{{  labeling fields in the dired buffer:
@@ -267,7 +421,8 @@ options passed to command `file'."
                     emacspeak-dired-file-cmd-options file))
     (when (bolp)
       (backward-delete-char 1))
-    (message (buffer-string))))
+    (emacspeak-auditory-icon 'select-object)
+    (dtk-speak-and-echo (buffer-string))))
 
 (defun emacspeak-dired-speak-header-line()
   "Speak the header line of the dired buffer. "
@@ -281,6 +436,7 @@ options passed to command `file'."
   "Speak the size of the current file.
 On a directory line, run du -s on the directory to speak its size."
   (interactive)
+  (dtk-stop)
   (let ((filename (dired-get-filename nil t))
         (size 0))
     (cond
@@ -293,12 +449,14 @@ On a directory line, run du -s on the directory to speak its size."
                                         ; check for ange-ftp
       (when (= size -1)
         (setq size
-              (nth  4
+              (nth  (if (= (char-after (line-beginning-position)) ?\ )
+			4 5)
                     (split-string (ems--this-line)))))
       (emacspeak-auditory-icon 'select-object)
-      (message "File size %s"
-               size))
-     (t (message "No file on current line")))))
+      (dtk-speak-and-echo
+       (message "File size %s"
+                size)))
+     (t (dtk-speak-and-echo "No file on current line")))))
 
 (defun emacspeak-dired-speak-file-modification-time ()
   "Speak modification time  of the current file."
@@ -307,11 +465,12 @@ On a directory line, run du -s on the directory to speak its size."
     (cond
      (filename
       (emacspeak-auditory-icon 'select-object)
-      (message "Modified on : %s"
+      (dtk-speak-and-echo
+       (format "Modified on : %s"
                (format-time-string
                 emacspeak-speak-time-format-string
-                (nth 5 (file-attributes filename)))))
-     (t (message "No file on current line")))))
+                (nth 5 (file-attributes filename))))))
+     (t (dtk-speak-and-echo "No file on current line")))))
 
 (defun emacspeak-dired-speak-file-access-time ()
   "Speak access time  of the current file."
@@ -320,11 +479,13 @@ On a directory line, run du -s on the directory to speak its size."
     (cond
      (filename
       (emacspeak-auditory-icon 'select-object)
-      (message "Last accessed   on  %s"
+      (dtk-speak-and-echo
+       (format "Last accessed   on : %s"
                (format-time-string
                 emacspeak-speak-time-format-string
-                (nth 4 (file-attributes filename)))))
-     (t (message "No file on current line")))))
+                (nth 4 (file-attributes filename))))))
+     (t (dtk-speak-and-echo "No file on current line")))))
+
 (defun emacspeak-dired-speak-symlink-target ()
   "Speaks the target of the symlink on the current line."
   (interactive)
@@ -334,10 +495,12 @@ On a directory line, run du -s on the directory to speak its size."
       (emacspeak-auditory-icon 'select-object)
       (cond
        ((file-symlink-p filename)
-        (message "Target is %s"
-                 (file-chase-links filename)))
-       (t (message "%s is not a symbolic link" filename))))
-     (t (message "No file on current line")))))
+        (dtk-speak-and-echo
+         (format "Target is %s"
+                 (file-chase-links filename))))
+       (t (dtk-speak-and-echo (format "%s is not a symbolic link" filename)))))
+     (t (dtk-speak-and-echo "No file on current line")))))
+
 (defun emacspeak-dired-speak-file-permissions ()
   "Speak the permissions of the current file."
   (interactive)
@@ -345,9 +508,32 @@ On a directory line, run du -s on the directory to speak its size."
     (cond
      (filename
       (emacspeak-auditory-icon 'select-object)
-      (message "Permissions %s"
-               (nth 8 (file-attributes filename))))
-     (t (message "No file on current line")))))
+      (dtk-speak-and-echo
+       (format "Permissions %s"
+               (let ((permissions (nth 8 (file-attributes filename))))
+		 (if (string-match "^.[?]+$" permissions)
+		     (nth  (if (= (char-after (line-beginning-position)) ?\ )
+			       0 1)
+			   (split-string (thing-at-point 'line)))
+		   permissions)))))
+     (t (dtk-speak-and-echo "No file on current line")))))
+
+(defun emacspeak-dired-speak-file-ownerships ()
+  "Speak the ownerships of the current file."
+  (interactive)
+  (let ((filename (dired-get-filename nil t)))
+    (cond
+     (filename
+      (emacspeak-auditory-icon 'select-object)
+      (dtk-speak-and-echo
+       (format "Owned by %s/%s"
+	       (nth (if (= (char-after (line-beginning-position)) ?\ )
+			2 3)
+		    (split-string (thing-at-point 'line)))
+	       (nth (if (= (char-after (line-beginning-position)) ?\ )
+			3 4)
+		    (split-string (thing-at-point 'line))))))
+     (t (dtk-speak-and-echo "No file on current line")))))
 
 ;;}}}
 ;;{{{  keys
@@ -363,6 +549,7 @@ On a directory line, run du -s on the directory to speak its size."
   (define-key dired-mode-map [C-return] 'emacspeak-dired-open-this-file)
   (define-key dired-mode-map "'" 'emacspeak-dired-show-file-type)
   (define-key  dired-mode-map "/" 'emacspeak-dired-speak-file-permissions)
+  (define-key  dired-mode-map "\M-/" 'emacspeak-dired-speak-file-ownerships)
   (define-key  dired-mode-map ";" 'emacspeak-dired-speak-header-line)
   (define-key  dired-mode-map "a" 'emacspeak-dired-speak-file-access-time)
   (define-key dired-mode-map "c" 'emacspeak-dired-speak-file-modification-time)
@@ -371,6 +558,7 @@ On a directory line, run du -s on the directory to speak its size."
   (define-key dired-mode-map "\C-i" 'emacspeak-speak-next-field)
   (define-key dired-mode-map  "," 'emacspeak-speak-previous-field))
 (add-hook 'dired-mode-hook  'emacspeak-dired-initialize 'append)
+(add-hook 'dired-mode-hook 'emacspeak-dired-setup-keys)
 
 ;;}}}
 ;;{{{ Advice locate:
